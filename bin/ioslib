#!/usr/bin/env node
/**
 * command line interface
 */

var colors = require('colors'),
	ioslib = require('../index'),
	program = require('commander'),
	spawn = require('child_process').spawn,
	fs = require('fs'),
	path = require('path'),
	tiapp = require('tiapp.xml'),
	log = require('../lib/log'),
	pkg = JSON.parse(fs.readFileSync(path.join(__dirname,'..','package.json')).toString()),
	appid,
	version,
	workdir,
	name;

program
	.version(pkg.version)
	.option('-j, --json', 'Output results as JSON')
	.option('-t, --ti', 'Output titanium as arguments')
	.option('-d, --project-dir <value>', 'the directory containing the project')
	.parse(process.argv);

var fn = program.project_dir || path.join(process.cwd(), 'tiapp.xml');
if (fs.existsSync(fn)) {
	var ti = tiapp.load(fn);
	appid = ti.id;
	version = ti.sdkVersion;
	name = ti.name;
	program.ti = true;
	program.project_dir = workdir = path.dirname(fn);
}
else {
	appid = program.args[0];
	workdir = path.dirname(fn);
}

log.level = 'trace';

ioslib.profile.find(appid,function(err,results){
	if (err) {
		console.error(err);
		process.exit(1);
	}
	if (program.json) {
		console.log(JSON.stringify(results,null,3));
		process.exit(0);
	}
	if (program.ti) {
		var args = [];
		args.push('--platform'), args.push('ios');
		args.push('--target'), args.push('device');
		args.push('--device-id'), args.push(results.device_id);
		args.push('--developer-name'), args.push('"'+results.developer_name.split(':').splice(1).join(':').trim()+'"');
		args.push('--pp-uuid'), args.push(results.profiles[0]);
		if (program.project_dir) {
			args.push('--project-dir');
			args.push(workdir);
		}
		console.log(args.join(' '));
		process.exit(0);
	}
	console.log('Device-ID:',results.device_id);
	console.log('Developer-Name:',results.developer_name);
	console.log('Provisioning-Profile:',results.profiles[0]);
});
